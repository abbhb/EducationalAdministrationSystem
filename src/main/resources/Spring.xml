<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--扫描除了控制层的所有组件-->
    <context:component-scan base-package="com.ssmstudy.ssm">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!--引入jdbc.properties-->
    <context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>

    <!--配置数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="username" value="${jdbc.user}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="url" value="${jdbc.url}"></property>
    </bean>

    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--开启事务注解驱动，将@transactional标识的方法或类中所有的方法进行事务管理-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--配置SqlSessionFactoryBean,可以在ioc容器里面提供SQL SessionFactory对象-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--设置mybatis核心配置文件的路径-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <property name="dataSource" ref="dataSource"></property>
        <property name="typeAliasesPackage" value="com.ssmstudy.ssm.pojo"></property>

    </bean>

    <!--有这个标签的话可以不在配置文件里面设置映射文件的位置，也可以自动装配mapper的接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.ssmstudy.ssm.mapper"></property>
    </bean>

    <bean id="annotationPropertyConfigurerRedis"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="order" value="1" />
        <property name="ignoreUnresolvablePlaceholders" value="true" />
        <property name="locations">
            <list>
                <value>classpath:redis.properties</value>
            </list>
        </property>
    </bean>

    <!-- redis数据源 -->
<!--    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">-->
<!--        &lt;!&ndash; 最大空闲数 &ndash;&gt;-->
<!--        <property name="maxIdle" value="${redis.maxIdle}" />-->
<!--        &lt;!&ndash; 最大空连接数 &ndash;&gt;-->
<!--        <property name="maxTotal" value="${redis.maxTotal}" />-->
<!--        &lt;!&ndash; 最大等待时间 &ndash;&gt;-->
<!--        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />-->
<!--        &lt;!&ndash; 返回连接时，检测连接是否成功 &ndash;&gt;-->
<!--        <property name="testOnBorrow" value="${redis.testOnBorrow}" />-->
<!--    </bean>-->
    <import resource="classpath:application-redis.xml"/>

    <!-- Spring-redis连接池管理工厂 -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <!-- IP地址 -->
        <property name="hostName" value="${redis.host}" />
        <!-- 端口号 -->
        <property name="port" value="${redis.port}" />
        <property name="password" value="" />
        <!-- 超时时间 默认2000-->
        <property name="timeout" value="${redis.timeout}" />
        <!-- 连接池配置引用 -->
        <property name="poolConfig" ref="poolConfig" />
        <!-- usePool：是否使用连接池 -->
        <property name="usePool" value="true"/>
    </bean>

    <!-- redis template definition -->
    <bean id="redisTemplate" scope="prototype" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory" />
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
        <!--开启事务  -->
        <property name="enableTransactionSupport" value="false"></property>
    </bean>

    <!--
          自定义redis工具类,在需要缓存的地方注入此类
          记一次最长的找bug，
          刚开始碰到在拦截器自动注入了redis工具类，在service就各种空指针，
          换成在redisservice中构造器注入RedisTemplate，再都访问redisservice就行。
          至于为什么开成多例，还没细看,浅看多例更安全？不管了，先玩会.
          验证后，不是在哪注入的问题，而是选择构造器注入就行。。。
          更多的选用构造器注入吧。
      -->

    <bean id="IRedisServiceImpl" scope="prototype" class="com.ssmstudy.ssm.service.impl.IRedisServiceImpl">
<!--        <constructor-arg  name="redisTemplate" ref="redisTemplate" />-->
    </bean>

    <!--拦截器bean-->
    <bean id="AuthorizationInterceptor" class="com.ssmstudy.ssm.Authorization.AuthorizationInterceptor"></bean>

</beans>